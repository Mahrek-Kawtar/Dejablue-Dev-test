package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/deja-blue/software-interview/go/pkg/charge"
	"github.com/deja-blue/software-interview/go/pkg/gen/gql/model"
	"github.com/deja-blue/software-interview/go/pkg/gen/gql/schema"
)

// Charger is the resolver for the Charger field.
func (r *queryResolver) Charger(ctx context.Context, id string) (*model.Charger, error) {
	c, err := r.ChargeResolver.Charger(charge.ChargerID(id))
	if err != nil {
		return nil, err
	}
	return c.ToChargeModel(), nil
}

// VehicleStateOfCharge is the resolver for the VehicleStateOfCharge field.
func (r *queryResolver) VehicleStateOfCharge(ctx context.Context, id string) (*model.VehicleStateOfCharge, error) {
	c, err := r.ChargeResolver.Charger(charge.ChargerID(id))
	if err != nil {
		return nil, err
	}
	model, err := c.ToVehicleStateOfChargeModel()
	if err != nil {
		// This is an expected state. We don't want to return an error to the client.
		return nil, nil
	}
	return model, nil
}

// Task 2
func (r *queryResolver) ChargeEstimates(ctx context.Context, id string) (*model.ChargeEstimates, error) {
	c, err := r.ChargeResolver.Charger(charge.ChargerID(id))
	if err != nil {
		return nil, err
	}
	vehicle, err := c.ToVehicleStateOfChargeModel()
	if err != nil || vehicle == nil {
		return nil, errors.New("vehicle state unavailable")
	}

	remainingCharge := *vehicle.MaxBatteryLevelKwH - *vehicle.CurrentBatteryLevelKwH
	if remainingCharge <= 0 {
		return &model.ChargeEstimates{
			EstimatedPrice:     0,
			EstimatedTimeHours: 0,
		}, nil
	}

	now := time.Now()
	rate := charge.VariableRateAt(now) // VariableRateAt returns price in dollars/kWh, so multiply by 100 to get cents

	// Calculate the estimated price using the formula:
	// Price = (Remaining charge in kWh * Tariff in cents per kWh) / 100 = price in dollars
	estimatedPrice := charge.EstimatedPriceForRemainingCharge(remainingCharge, rate)

	// Calculate charging time in hours based on the charger's max power (kW)
	chargePowerKw := float64(c.MaxKwHDraw)
	timeHours := remainingCharge / chargePowerKw

	return &model.ChargeEstimates{
		EstimatedPrice:     estimatedPrice,
		EstimatedTimeHours: timeHours,
	}, nil
}

// CheapestChargeWindow is the resolver for the CheapestChargeWindow field.
func (r *queryResolver) CheapestChargeWindow(ctx context.Context, id string) (*model.CheapestChargeWindow, error) {
	panic(fmt.Errorf("not implemented: CheapestChargeWindow - CheapestChargeWindow"))
}

// ChargerState is the resolver for the ChargerState field.
func (r *subscriptionResolver) ChargerState(ctx context.Context, id string) (<-chan *model.ChargerState, error) {
	// 	Task 4:
	// This function needs to fetch the charger state information and then subscribe to future updates.
	// Be mindful of the fact that this is a pipeline of information flow and we do not control which part of the pipeline receives a notice of cancellation first.
	// Also be mindful of accidentally blocking main thread.
	// I find unit testing most helpful with sync.WaitGroup as it enables you to control the order of operations to reach the test points that you want to verify.
	return nil, errors.New("unimplemented")
}

// Query returns schema.QueryResolver implementation.
func (r *Resolver) Query() schema.QueryResolver { return &queryResolver{r} }

// Subscription returns schema.SubscriptionResolver implementation.
func (r *Resolver) Subscription() schema.SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
